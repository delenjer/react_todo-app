{"version":3,"sources":["components/Form/Form.js","components/ToDoItem/ToDoItem.js","components/ToDoList/ToDoList.js","components/Filter/Filter.js","App.js","index.js"],"names":["Form","state","inputValue","idToDo","onInputChange","event","setState","target","value","handleSubmit","preventDefault","trim","props","addToDo","title","completed","this","onSubmit","className","placeholder","onChange","React","Component","ToDoItem","id","mark","deleteItem","type","checked","htmlFor","onClick","ToDoList","list","markComplete","map","key","Filter","filterName","filter","currentFilter","href","FILTERS","name","App","todoList","everyCompleted","todo","toggleAllComplete","toggleTodoComplete","itemId","every","isAllChecked","setFilter","clearCompleted","length","todos","filteredTodos","item","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.42cbd910.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Form extends React.Component {\n  state = {\n    inputValue: '',\n    idToDo: 0,\n  }\n\n  onInputChange = (event) => {\n    this.setState({\n      inputValue: event.target.value,\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    if (this.state.inputValue.trim() !== '') {\n      this.props.addToDo({\n        title: this.state.inputValue,\n        idToDo: this.state.idToDo,\n        completed: false,\n      });\n      this.setState(state => ({\n        inputValue: '',\n        idToDo: state.idToDo + 1,\n      }));\n    }\n  }\n\n  render() {\n    const { inputValue } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={inputValue}\n          onChange={this.onInputChange}\n        />\n      </form>\n    );\n  }\n}\n\nForm.propTypes = { addToDo: PropTypes.func.isRequired };\n\nexport default Form;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ToDoItem({ title, completed, id, mark, deleteItem }) {\n  return (\n    <li className={completed ? 'completed' : ''}>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          onChange={() => mark(id)}\n          className=\"toggle\"\n          id={id}\n          checked={completed}\n        />\n        <label htmlFor={id}>{title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteItem(id)}\n        />\n      </div>\n    </li>\n  );\n}\n\nToDoItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  id: PropTypes.number.isRequired,\n  mark: PropTypes.func.isRequired,\n  deleteItem: PropTypes.func.isRequired,\n};\n\nexport default ToDoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ToDoItem from '../ToDoItem/ToDoItem';\n\nfunction ToDoList({ list, markComplete, deleteItem }) {\n  return (\n    <ul className=\"todo-list\">\n      {list.map(({ title, completed, idToDo }) => (\n        <ToDoItem\n          mark={markComplete}\n          id={idToDo}\n          title={title}\n          completed={completed}\n          key={idToDo}\n          deleteItem={deleteItem}\n        />\n      ))}\n    </ul>\n  );\n}\n\nToDoList.propTypes = {\n  list: PropTypes.arrayOf(PropTypes.object).isRequired,\n  markComplete: PropTypes.func.isRequired,\n  deleteItem: PropTypes.func.isRequired,\n};\n\nexport default ToDoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Filter = ({ filterName, filter, currentFilter }) => (\n  <li>\n    <a\n      href=\"#/\"\n      onClick={() => filter(filterName)}\n      className={filterName === currentFilter ? 'selected' : ''}\n    >\n      {filterName}\n    </a>\n  </li>\n);\n\nFilter.propTypes = {\n  filterName: PropTypes.string.isRequired,\n  filter: PropTypes.func.isRequired,\n  currentFilter: PropTypes.string.isRequired,\n};\n\nexport default Filter;\n","import React from 'react';\nimport Form from './components/Form/Form';\nimport ToDoList from './components/ToDoList/ToDoList';\nimport Filter from './components/Filter/Filter';\n\nconst FILTERS = [\n  { name: 'all' },\n  { name: 'completed' },\n  { name: 'active' },\n];\n\nclass App extends React.Component {\n  state = {\n    todoList: [],\n    everyCompleted: false,\n    currentFilter: 'all',\n  }\n\n  addToDo = (todo) => {\n    this.setState(state => ({\n      todoList: [...state.todoList, todo],\n      everyCompleted: false,\n    }));\n  }\n\n  toggleAllComplete = () => {\n    this.setState(state => ({\n      everyCompleted: !state.everyCompleted,\n      todoList: state.todoList.map(todo => (\n        {\n          ...todo,\n          completed: !state.everyCompleted,\n        }\n      )),\n    }));\n  }\n\n  toggleTodoComplete = (itemId) => {\n    this.setState(state => ({\n      todoList: state.todoList.map((todo) => {\n        if (itemId === todo.idToDo) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return { ...todo };\n      }),\n    }));\n    this.setState(state => ({\n      everyCompleted: state.todoList.every(todo => todo.completed),\n    }));\n  }\n\n  isAllChecked = () => this.state.todoList.every(todo => todo.completed);\n\n  deleteItem = (itemId) => {\n    this.setState(state => ({\n      todoList: state.todoList.filter(({ idToDo }) => idToDo !== itemId),\n    }));\n  }\n\n  setFilter = (name) => {\n    this.setState({\n      currentFilter: name,\n    });\n  }\n\n  clearCompleted = () => {\n    this.setState(state => ({\n      todoList: state.todoList.filter(({ completed }) => completed === false),\n    }));\n  }\n\n  render() {\n    const { todoList, currentFilter } = this.state;\n    const filteredTodos = (todos, filter) => {\n      switch (filter) {\n        case 'completed':\n          return todos.filter(({ completed }) => completed);\n        case 'active':\n          return todos.filter(({ completed }) => !completed);\n        default:\n          return todos;\n      }\n    };\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <Form addToDo={this.addToDo} />\n        </header>\n        {this.state.todoList.length !== 0\n        && (\n          <>\n            <section className=\"main\">\n              <input\n                type=\"checkbox\"\n                id=\"toggle-all\"\n                className=\"toggle-all\"\n                onChange={this.toggleAllComplete}\n                checked={this.isAllChecked()}\n              />\n              <label htmlFor=\"toggle-all\">Mark all as complete</label>\n              <ToDoList\n                list={filteredTodos(todoList, currentFilter)}\n                markComplete={this.toggleTodoComplete}\n                deleteItem={this.deleteItem}\n              />\n            </section>\n            <footer className=\"footer\">\n              <span className=\"todo-count\">\n                {todoList.filter(({ completed }) => !completed)\n                  .length}\n                  items left\n              </span>\n\n              <ul className=\"filters\">\n                {FILTERS.map(item => (\n                  <Filter\n                    filterName={item.name}\n                    filter={this.setFilter}\n                    currentFilter={currentFilter}\n                    key={item.name}\n                  />\n                ))}\n              </ul>\n\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={() => this.clearCompleted()}\n              >\n                Clear completed\n              </button>\n            </footer>\n          </>\n        )\n        }\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}